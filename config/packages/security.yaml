security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers: 
        # Criptage des mot de passe 
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # j'ai fournie le chemin a symfony pour ce déconnecter
            logout: 
                path: app_logout
            # Je vien de dire a symfony voici la route qui va te permet de logué un utilisateur et de check si les identifiant d'un utilisateur son correcte 
            form_login:
                login_path: app_login
                check_path: app_login
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # permet de déclaré un chemin une url qui contient une chain de caractére qui associré un role définie (si je veux accède à compte il faut que je soie un user) dés que compte se trouve dans URL vérifie le role de l'utilisateur (il doit etre un role_user)
        - { path: ^/compte, roles: ROLE_USER }
        - { path: ^/commande, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
